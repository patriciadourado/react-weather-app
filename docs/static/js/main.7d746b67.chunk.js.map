{"version":3,"sources":["components/Titles.js","components/Forms.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Forms","onSubmit","this","props","getWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","t0","console","log","stop","components_Titles","components_Forms","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d746b67.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Weather Finder</h1>\r\n                <p>API from openweathermap.org</p>                \r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Titles;","/*\r\n    This form component has access getWeather method on App.js and get access through the inputs:\r\n    city and country of the object (data) from the API;\r\n*/\r\n\r\nimport React from \"react\";\r\n\r\nclass Forms extends React.Component{\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country (ex. BR)\"/>\r\n                <button>Know Weather</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Forms;","/*\r\n    This component returns a table with all props from weather api:\r\n    location, city, country, temperature, description and also a message error;\r\n*/\r\nimport React from \"react\";\r\n\r\n\r\nclass Weather extends React.Component{\r\n    render(){\r\n        return(\r\n\t\t<div className=\"info\">\r\n            <div className=\"info-weather\">\r\n\t\t\t\t<div className=\"table\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>City</th>\r\n\t\t\t\t\t\t\t\t<th>Country</th>\r\n\t\t\t\t\t\t\t\t<th>Temperature</th>\r\n\t\t\t\t\t\t\t\t<th>Humidity</th>\r\n\t\t\t\t\t\t\t\t<th>Condition</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t{this.props.city && <td>{this.props.city}</td>}\r\n\t\t\t\t\t\t\t\t{this.props.country && <td>{this.props.country}</td>}\r\n\t\t\t\t\t\t\t\t{this.props.temperature && <td>{this.props.temperature} &#8451;</td>}\r\n\t\t\t\t\t\t\t\t{this.props.humidity && <td>{this.props.humidity}</td>}\r\n\t\t\t\t\t\t\t\t{this.props.description && <td>{this.props.description}</td>}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n                <div className=\"error-message\">\r\n                    {this.props.error && <p>{this.props.error}</p>}\r\n                </div>\r\n            </div>\r\n\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n\r\n","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Forms from \"./components/Forms\";\nimport Weather from \"./components/Weather\";\n\n//Sign up and Login to openweatherap.org and get your own API_KEY;\n\nconst API_KEY = \"01c331b462cd6dfb2abd515dffd14055\";\n\nclass App extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async(e) => {\n    try{\n      e.preventDefault();//Prevent default behavior (not refresh)\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n        \n      if(city && country){\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      }\n      else{\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter the value.\"\n        });     \n      }\n    }\n    catch(e) {\n    console.log('error: ', e);  \n    }\n  }\n  render(){\n    return (\n      <div>\n        <div className=\"panel-header\">\n          <Titles />\n        </div>\n\t\t<div className=\"row\">\n\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t  <Forms getWeather={this.getWeather}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"panel-body\">\n\t\t\t\t\t  <Weather temperature={this.state.temperature}\n\t\t\t\t\t  city={this.state.city}\n\t\t\t\t\t  country={this.state.country}\n\t\t\t\t\t  humidity={this.state.humidity}\n\t\t\t\t\t  description={this.state.description}\n\t\t\t\t\t  error={this.state.error}\n\t\t\t\t\t  />\n\t\t\t\t</div>\n\t\t</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}